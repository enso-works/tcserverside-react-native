require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, '12.4'
install! 'cocoapods', :deterministic_uuids => false

production = ENV["PRODUCTION"] == "1"

target 'TcserversideExample' do
  use_frameworks! :linkage => :static
  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  pre_install do |installer|
    Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}

    installer.pod_targets.each do |pod|
      if pod.name.eql?('RNPermissions') || pod.name.start_with?('Permission-')
        def pod.build_type;
          Pod::BuildType.static_library # >= 1.9
        end
      end
    end
  end

  pod "tcserverside-react-native-swift", :path => '../node_modules/@commandersact/tcserverside-react-native/tcserverside-react-native-swift.podspec'
  pod "tccore-react-native-swift", :path => '../node_modules/@commandersact/tccore-react-native/tccore-react-native-swift.podspec'
  pod "tcconsent-react-native-swift", :path => '../node_modules/@commandersact/tcconsent-react-native/tcconsent-react-native-swift.podspec'

  use_react_native!(
    :path => config[:reactNativePath],
    # to enable hermes on iOS, change `false` to `true` and then install pods
    :production => production,
    :hermes_enabled => false,
    :fabric_enabled => flags[:fabric_enabled],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'TcserversideExampleTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
  react_native_post_install(installer)
  __apply_Xcode_12_5_M1_post_install_workaround(installer)

  # Backport of: https://github.com/AlexanderEggers/react-native/blob/18ac6a3743749c0b8273c64dac982c30b74928e3/packages/react-native/scripts/cocoapods/utils.rb#L124
  installer.target_installation_results.pod_target_installation_results
    .each do |pod_name, target_installation_result|
      target_installation_result.native_target.build_configurations.each do |config|
        # unary_function and binary_function are no longer provided in C++17 and newer standard modes as part of Xcode 15. They can be re-enabled with setting _LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION
        # Ref: https://developer.apple.com/documentation/xcode-release-notes/xcode-15-release-notes#Deprecations
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= '$(inherited) '
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '"_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION" '
        
        # Fix for React Native C++ compilation issues with Xcode 16+
        if pod_name.to_s.start_with?('RCT-Folly') || pod_name.to_s.start_with?('React-')
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= '$(inherited) '
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '"FOLLY_NO_CONFIG=1" '
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '"FOLLY_MOBILE=1" '
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '"FOLLY_USE_LIBCPP=1" '
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '"FOLLY_CFG_NO_COROUTINES=1" '
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -DFOLLY_CFG_NO_COROUTINES=1'
          
          # Fix for simulator builds with Xcode 16+ - exclude x86_64 architecture
          config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'x86_64'
          config.build_settings['VALID_ARCHS'] = 'arm64'
        end
      end
    end
  end
end
